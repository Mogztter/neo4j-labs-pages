import org.asciidoctor.gradle.jvm.AsciidoctorTask
import com.neo4j.gradle.wordpress.WordPressUploadTask
import okhttp3.*

import java.nio.charset.Charset
import java.nio.charset.StandardCharsets

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.6.0'
    }
}

plugins {
    id 'org.asciidoctor.jvm.gems' version '3.2.0' apply false
    id 'org.asciidoctor.jvm.convert' version '3.2.0' apply false
    id "com.neo4j.gradle.wordpress.WordPressPlugin" version "0.1.0"
}

apply plugin: 'org.asciidoctor.jvm.gems'

repositories {
    mavenCentral()
    jcenter()
    ruby {
        gems()
    }
}

dependencies {
    asciidoctorGems 'rubygems:neo4j-asciidoctor-extensions:0.0.5'
}

wordpress {
    username = project.hasProperty('wordpress-username') ? project.property('wordpress-username') : 'neo'
    password = project.hasProperty('wordpress-password') ? project.property('wordpress-password') : ''
    host = project.hasProperty('wordpress-host') ? project.property('wordpress-host') : 'localhost'
    scheme = 'https'
}

def stage = project.findProperty('stage')

group = 'com.neo4j'
version = '1.0.0'
archivesBaseName = 'neo4j-labs-pages'

description = """neo4j-labs-pages"""

asciidoctorj {
    requires "${rootProject.projectDir}/resources/extensions.rb"
    options standalone: false,
            template_dirs: ["${rootProject.projectDir}/resources/templates"]
    attributes 'apoc-version': "3.5.0.4",
            'icons': 'font',
            'stage': stage != null ? stage : '',
            'parent-path': '/labs',
            'document-metadata-attrs-include': 'slug,parent-parent,tags*'
}

task convertHtml(type: AsciidoctorTask) {
    dependsOn asciidoctorGemsPrepare

    baseDir file("${projectDir}/asciidoc")
    sourceDir file("${projectDir}/asciidoc")
    sources {
        exclude 'footer.adoc'
    }
    outputDir file("${projectDir}/build/html")
}

task convert {
    dependsOn convertHtml
}

task checkDNS() {
    doLast {
        println(InetAddress.getAllByName("neo4j.com"))
    }
}

def responseCount(Response response) {
    def count = 1
    def res = response.priorResponse
    while (res != null) {
        count++
        res = res.priorResponse
    }
    return count
}

task getWordPress {
    doLast {
        def username = project.hasProperty('wordpress-username') ? project.property('wordpress-username') : 'neo'
        def password = project.hasProperty('wordpress-password') ? project.property('wordpress-password') : ''
        def host = project.hasProperty('wordpress-host') ? project.property('wordpress-host') : 'localhost'
        if (username == 'neo') {
            println("username is neo")
        } else {
            println("username is not empty")
        }
        if (password == '') {
            println("password is empty :/")
        } else {
            println("password is not empty")
        }
        def scheme = 'https'
        def client = new OkHttpClient.Builder()
                .authenticator(new Authenticator() {
                    @Override
                    Request authenticate(Route route, Response response) {
                        println("authenticate: " + response)
                        if (responseCount(response) >= 3) {
                            return null // unable to authenticate for the third time, we give up...
                        }
                        def credential = Credentials.basic(username, password, StandardCharsets.UTF_8)
                        return response.request.newBuilder().header("Authorization", credential).build()
                    }
                })
                .build()
        def httpUrl = new HttpUrl.Builder()
                .scheme("https")
                .host("neo4j.com")
                .addPathSegment("wp-json")
                .addPathSegment("wp")
                .addPathSegment("v2")
                .addPathSegment("pages")
                .addQueryParameter("per_page", "10")
                .addQueryParameter("status", "publish,future,draft,pending,private")
                .build()
        def request = new Request.Builder()
                .url(httpUrl)
                .header("Authorization", Credentials.basic(username, password, StandardCharsets.UTF_8))
                .get()
                .build()
        def response = client.newCall(request).execute()
        println(response)
    }
}

if (stage == 'production' || stage == 'testing') {
    task wordPressUpload(type: WordPressUploadTask) {
        dependsOn convertHtml
        source = convertHtml.outputs.files
        type = "page"
        status = stage == 'production' ? "publish" : "private"
        template = "page-inner-100-blue.php"
    }
}
